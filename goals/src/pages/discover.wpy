<style lang="less">
  .swiper-item-images {
    width: 100%;
    height: 300 rpx;
  }

  .swiper {
    border-radius: 10px;
    height: 300 rpx;
    margin: 2px 6px;
    overflow: hidden;
  }
</style>

<template>

  <!--导航栏-->
  <swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" interval="{{interval}}"
          duration="{{duration}}" circular="true" class="swiper">
    <block wx:for='{{imageList}}' wx:key='*this'>

      <swiper-item>
        <image src='{{item}}' mode='aspectFill' class="swiper-item-images"/>
      </swiper-item>
    </block>
  </swiper>

  <!--功能列表页-->
  <view class="weui-panel weui-panel_access">
    <view class="weui-panel__hd">功能列表</view>
    <view class="weui-panel__bd">
      <view class="weui-grids">
        <block wx:for="{{grids}}" wx:key="*this">
          <navigator url="" class="weui-grid" hover-class="weui-grid_active">
            <image class="weui-grid__icon" src="../images/icon_tabbar.png"/>
            <view class="weui-grid__label">挑战</view>
          </navigator>
        </block>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Panel from '@/components/panel' // alias example
  import Counter from 'counter' // alias example
  import List from '../components/list' // aliasFields example
  import moduleA from 'module-a' // aliasFields ignore module example
  import Group from '../components/group'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'

  console.log('moduleA ignored: ', moduleA) // => moduleA ignored: {}

  @connect({
    num(state) {
      return state.counter.num
    },
    asyncNum(state) {
      return state.counter.asyncNum
    },
    sumNum(state) {
      return state.counter.num + state.counter.asyncNum
    }
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'test'
    }
    components = {
      panel: Panel,
      counter1: Counter,
      counter2: Counter,
      list: List,
      group: Group,
      toast: Toast
    }

    mixins = [testMixin]
    data = {
      indicatorDots: true,
      vertical: false,
      autoplay: true,
      interval: 2000,
      duration: 500,
      grids: [0],
      imageList: [
        'http://img.zcool.cn/community/014056564bd8596ac7251c94eb5559.jpg',
        'http://img.zcool.cn/community/01e03b58047e96a84a0e282b09e8fc.jpg',
        'http://img.zcool.cn/community/0132dd55800bc700000059ffbe83e9.jpg@1280w_1l_2o_100sh.jpg',
        'http://img.zcool.cn/community/0154755a2df102a80120ba3828b5af.jpg@1280w_1l_2o_100sh.jpg',
        'http://pic.90sjimg.com/back_pic/00/00/69/40/bf4f8e2ab7e05dc3c7cc2a7f7e9c2fe7.jpg',
        'http://img.zcool.cn/community/01a2a2594943d3a8012193a328e0fd.jpg@1280w_1l_2o_100sh.jpg'
      ]
    }

    computed = {
      now() {
        return +new Date()
      }
    }

    methods = {
      plus() {
        this.mynum++
      },
      toast() {
        let promise = this.$invoke('toast', 'show', {
          title: '自定义标题',
          img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
        })

        promise.then((d) => {
          console.log('toast done')
        })
      },
      tap() {
        console.log('do noting from ' + this.$name)
      },
      communicate() {
        console.log(this.$name + ' tap')

        this.$invoke('counter2', 'minus', 45, 6)
        this.$invoke('counter1', 'plus', 45, 6)

        this.$broadcast('index-broadcast', 1, 3, 4)
      },
      request() {
        let self = this
        let i = 10
        let map = ['MA==', 'MQo=', 'Mg==', 'Mw==', 'NA==', 'NQ==', 'Ng==', 'Nw==', 'OA==', 'OQ==']
        while (i--) {
          wepy.request({
            url: 'https://www.madcoder.cn/tests/sleep.php?time=1&t=css&c=' + map[i] + '&i=' + i,
            success: function(d) {
              self.netrst += d.data + '.'
              self.$apply()
            }
          })
        }
      },
      counterEmit(...args) {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    events = {
      'index-emit': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    onLoad() {
      let self = this
      this.$parent.getUserInfo(function(userInfo) {
        if (userInfo) {
          self.userInfo = userInfo
        }
        self.normalTitle = '标题已被修改'

        self.setTimeoutTitle = '标题三秒后会被修改'
        setTimeout(() => {
          self.setTimeoutTitle = '到三秒了'
          self.$apply()
        }, 3000)

        self.$apply()
      })
    }
  }
</script>
